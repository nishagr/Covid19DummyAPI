version: '3.4'

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=postgres",
          "--dbname=test"
        ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
    volumes:
      - ./volumes/postgres/:/var/lib/postgresql/data/
      - ./configuration/postgres/:/docker-entrypoint-initdb.d/:ro
    networks:
      - node_default
  redis:
    container_name: redis
    image: redis:latest
    restart: on-failure
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
    volumes:
      - ./volumes/redis/:/data/
    networks:
      - node_default
  application:
    container_name: application
    image: application
    build:
      context: ./node/
      dockerfile: ./Dockerfile
    restart: on-failure
    environment:
      NODE_ENV: docker
      DEBUG: debug
    ports:
      - 8000:8000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 30s
      timeout: 2s
      retries: 5
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - node_default
networks:
  node_default:
    name: node_default
